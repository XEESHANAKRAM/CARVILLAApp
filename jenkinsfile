pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'xeeshanakram/my-html-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"        
        DOCKER_HUB_CREDS = 'dockerhub-credentials'
        CONTAINER_NAME = 'my-html-container'     
        EXTERNAL_PORT = '8000'                  
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/XEESHANAKRAM/CARVILLAApp.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .'
            }
        }

        stage('Test') {
            steps {
                sh '''
                    if [ -f index.html ]; then
                        echo "index.html exists"
                        grep -i "<html" index.html || exit 1
                    else
                        echo "index.html not found"
                        exit 1
                    fi
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDS}", usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh '''
                            echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_USERNAME}" --password-stdin
                            docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                    # Stop and remove any existing container with the same name
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true

                    # Run the container, mapping external port 8000 to internal port 80
                    docker run --name ${CONTAINER_NAME} -d -p ${EXTERNAL_PORT}:80 ${DOCKER_IMAGE}:${IMAGE_TAG}
                '''
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
    }
}
